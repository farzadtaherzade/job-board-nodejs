generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WRITER
  EMPLOYER
  JOBSEEKER
}

enum Type {
  FULLTIME
  PARTTIME
  INTERSHIP
  JOBSEEKER
}

enum JobStatus {
  OPEN
  CLOSED
}

enum Experience {
  JUNIOR
  MIDLEVEL
  SENIOR
}

enum JobRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique()
  phone    String @unique()
  password String
  role     Role?  @default(JOBSEEKER)

  employer Employer?
  resume   Resume?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("user")
}

model Employer {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String
  age       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Company Company?

  user       User         @relation(fields: [userId], references: [id])
  userId     Int          @unique
  Job        Job[]
  JobRequest JobRequest[]

  @@map("employer")
}

model CompanyRequestResponse {
  id Int @id @default(autoincrement())

  message  String
  approved Boolean @default(false)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String   @unique()
  logo         String?
  description  String
  website      String
  industry     String
  about        String
  company_size Int
  location     String
  confirm      Boolean? @default(false)

  employer   Employer @relation(fields: [employerId], references: [id])
  employerId Int      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Job                    Job[]
  JobRequest             JobRequest[]
  CompanyRequestResponse CompanyRequestResponse[]

  @@map("company")
}

model Resume {
  id                Int      @id @default(autoincrement())
  firstname         String?
  lastname          String?
  age               Int?
  eduction          String?
  profile_image     String?
  resume            String?
  skills            String[]
  neighbourhood     String?
  projects          String[]
  desired_job_title String?
  location          String?
  user              User     @relation(fields: [userId], references: [id])
  userId            Int      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  jobRequest JobRequest[]

  @@map("resume")
}

model Job {
  id             Int        @id @default(autoincrement())
  title          String
  short_desc     String     @db.VarChar(150)
  description    String
  skill_required String[]
  salary         Int
  status         JobStatus  @default(OPEN)
  type           Type
  experience     Experience

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  employer   Employer @relation(fields: [employerId], references: [id])
  employerId Int

  jobRequest JobRequest[]

  @@map("job")
}

model JobRequest {
  id Int @id @default(autoincrement())

  message String?
  status  JobRequestStatus @default(PENDING)

  job   Job @relation(fields: [jobId], references: [id])
  jobId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId Int

  employer   Employer @relation(fields: [employerId], references: [id])
  employerId Int

  createdAt DateTime @default(now())

  @@map("job_resume")
}
