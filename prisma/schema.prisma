generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WRITER
  EMPLOYER
  JOBSEEKER
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique()
  phone    String @unique()
  password String
  role     Role?  @default(JOBSEEKER)

  employer Employer?
  resume   Resume?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("user")
}

model Employer {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Company Company?

  user   User  @relation(fields: [userId], references: [id])
  userId Int   @unique
  Job    Job[]

  @@map("employer")
}

model Company {
  id                Int      @id @default(autoincrement())
  name              String   @unique()
  company_image     String?
  short_description String
  website           String
  industry          String
  about             String
  company_size      Int
  location          String
  confirm           Boolean? @default(false)

  employer   Employer @relation(fields: [employerId], references: [id])
  employerId Int      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Job       Job[]

  @@map("company")
}

model Resume {
  id                Int      @id @default(autoincrement())
  firstname         String?
  lastname          String?
  age               Int?
  eduction          String?
  profile_image     String?
  resume            String?
  skills            String[]
  neighbourhood     String?
  projects          String[]
  desired_job_title String?
  location          String?
  user              User     @relation(fields: [userId], references: [id])
  userId            Int      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  jobRequest JobRequest[]

  @@map("resume")
}

model Job {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String
  skill_required     String[]
  salary             String
  education_required String
  status             Boolean
  instantaneous      Boolean? @default(false)
  conditions         Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  employer   Employer @relation(fields: [employerId], references: [id])
  employerId Int

  jobRequest JobRequest[]

  @@map("job")
}

model JobRequest {
  id    Int @id @default(autoincrement())
  job   Job @relation(fields: [jobId], references: [id])
  jobId Int

  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId Int

  @@map("job_resume")
}
